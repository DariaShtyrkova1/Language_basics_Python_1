from copy import deepcopy


# Задание 1

# Выяснить тип результата выражений:
# 15 * 3
# 15 / 3
# 15 // 2
# 15 ** 2

multiplic = 15 * 3  # умножение чисел
rest = 15 / 3  # остаток от деления
division = 15 // 2  # целочисленное деление
squa = 15 ** 2  # возведение в квадрат

#  с помощью type можем узнать класс объекта

print(f'Выражение: 15 * 3 = {multiplic}, тип результата выражения: {type(multiplic)} \n'
      f'Выражение: 15 / 3 = {rest}, тип результата выражения: {type(rest)} \n'
      f'Выражение: 15 // 2 = {division}, тип результата выражения: {type(division)} \n'
      f'Выражение: 15 ** 2 = {squa}, тип результата выражения: {type(squa)}')

print('____________________')  # просто отделить задание одно от другого

# Задание 2

# Дан список:
# ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']
#
# Необходимо его обработать — обособить каждое целое число (вещественные не трогаем) кавычками
# (добавить кавычку до и кавычку после элемента списка, являющегося числом) и
# дополнить нулём до двух целочисленных разрядов:
# ['в', '"', '05', '"', 'часов', '"', '17', '"', 'минут', 'температура',
# 'воздуха', 'была', '"', '+05', '"', 'градусов']
#
# Сформировать из обработанного списка строку:
# в "05" часов "17" минут температура воздуха была "+05" градусов
#
# Подумать, какое условие записать, чтобы выявить числа среди элементов списка?
# Как модифицировать это условие для чисел со знаком?
# Примечание: если обособление чисел кавычками не будет получаться - можете вернуться к его
# реализации позже. Главное: дополнить числа до двух разрядов нулём!


one_list = ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']  # дан список

for numb, val in enumerate(one_list):  # numb - порядк. номер элемента, val - значение элемента
      if val[1:].isdigit() or val[:].isdigit():  # проходим по элементам по порядку и проверяем есть ли цифры
            one_list[numb] = f'"{val}"'
            if len(val) < 2:  # проверка на то, двухразрядное число или нет
                  one_list[numb] = f'"0{val}"'

new = ' '.join(one_list)
print(new)


print('____________________')  # просто отделить задание одно от другого


# Задание 4

# Дан список, содержащий искажённые данные с должностями и именами сотрудников:
# ['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА', 'токарь высшего разряда нИКОЛАй', 'директор аэлита']
#
# Известно, что имя сотрудника всегда в конце строки.
# Сформировать из этих имён и вывести на экран фразы вида: 'Привет, Игорь!'
# Подумать, как получить имена сотрудников из элементов списка, как привести их к корректному виду.
# Можно ли при этом не создавать новый список?

name_list = ['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА', 'токарь высшего разряда нИКОЛАй', 'директор аэлита']

for i, name in enumerate(name_list):  # пройдемся по списку и его индексам
     name_list[i] = list(name_list[i].split())  # преобразуем элементы списка на отдельные списки
     name_list[i] = name_list[i].pop()  # вырезаем в каждом списке имя в конце
     name_list[i] = name_list[i].capitalize()  # приводим имена к корректному виду
     print(f'Привет, {name_list[i]}!')  # выводим на экран необходимого вида фразы


print('____________________')  # просто отделить задание одно от другого

# Задание 5

# Создать вручную список, содержащий цены на товары (10–20 товаров), например:
# [57.8, 46.51, 97, ...]
# A. Вывести на экран эти цены через запятую в одну строку, цена должна отображаться
# в виде <r> руб <kk> коп (например «5 руб 04 коп»).
# Подумать, как из цены получить рубли и копейки, как добавить нули, если,
# например, получилось 7 копеек или 0 копеек (должно быть 07 коп или 00 коп).
# B. Вывести цены, отсортированные по возрастанию, новый список не создавать
# (доказать, что объект списка после сортировки остался тот же).
# C. Создать новый список, содержащий те же цены, но отсортированные по убыванию.
# D. Вывести цены пяти самых дорогих товаров. Сможете ли вывести цены этих товаров по возрастанию, написав минимум кода?


prices = [57.8, 46.41, 97, 17.3, 55.46, 77.12, 15, 81, 4.21, 66]  # список с ценами на товар

print('Задание А')

for i, price in enumerate(prices):  # где i - порядк. номер элемента, price - значение элемента
    prices[i] = prices[i] * 100  # переводим все цифры в копейки
    prices[i]= f'{int(prices[i] // 100)} руб {prices[i] % 100} коп'  # отделяем рубли и копейки

print(prices)


print('Задание B')

prices_one = prices  # создаем копию первого списка, не создавая новый объект

print(f'Айди исходного списка: {id(prices)}')
prices.sort()  # сортируем по возрастанию цены
print(prices)
print(f'Айди отсортированного списка: {id(prices)}')


print(f'Задание C')

new_prices = deepcopy(prices_one)  # создаем копию списка как новый объект, новый список
print(f'Айди первоначального списка: {id(prices)}')  # доказываем, что создаем именно новый объект
print(f'Айди нового списка: {id(new_prices)}')  # доказываем, что создаем именно новый объект
new_prices = sorted(new_prices, reverse=True)  # сортируем по уменьшению цены
print(new_prices)


print(f'Задание D')

# берем список, который сортирован по уменьшению цены, и делаем срез, чтобы убрать последние элементы, кроме первых 5
print(f'Пять самых дорогих товаров: {new_prices[:-5]}')
